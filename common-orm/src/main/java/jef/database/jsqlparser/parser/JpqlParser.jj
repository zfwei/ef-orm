/* ================================================================
 * JEF JPQLParser : javacc based jpql parser 
 * ================================================================
 *
 * JEF - Copyright 2009-2010 Jiyi (mr.jiyi@gmail.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
options{
    IGNORE_CASE=true ;
    STATIC=false;
    JDK_VERSION = "1.5";
    UNICODE_INPUT = true; 	
//	JAVA_UNICODE_ESCAPE = true; 	
//  DEBUG_LOOKAHEAD= true ;
//  FORCE_LA_CHECK=true;
//  DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(JpqlParser )
package jef.database.jsqlparser.parser;

import java.util.ArrayList;
import java.util.List;

import jef.database.jsqlparser.expression.BinaryExpression;
import jef.database.jsqlparser.expression.DoubleValue;
import jef.database.jsqlparser.expression.Function;
import jef.database.jsqlparser.expression.Over;
import jef.database.jsqlparser.expression.InverseExpression;
import jef.database.jsqlparser.expression.JpqlParameter;
import jef.database.jsqlparser.expression.LongValue;
import jef.database.jsqlparser.expression.DateValue;
import jef.database.jsqlparser.expression.TimeValue;
import jef.database.jsqlparser.expression.TimestampValue;
import jef.database.jsqlparser.expression.NullValue;
import jef.database.jsqlparser.expression.Parenthesis;
import jef.database.jsqlparser.expression.StringValue;
import jef.database.jsqlparser.expression.CaseExpression;
import jef.database.jsqlparser.expression.WhenClause;
import jef.database.jsqlparser.expression.AnyComparisonExpression;
import jef.database.jsqlparser.expression.AllComparisonExpression;
import jef.database.jsqlparser.expression.operators.arithmetic.Addition;
import jef.database.jsqlparser.expression.operators.arithmetic.BitwiseAnd;
import jef.database.jsqlparser.expression.operators.arithmetic.BitwiseOr;
import jef.database.jsqlparser.expression.operators.arithmetic.BitwiseXor;
import jef.database.jsqlparser.expression.operators.arithmetic.Concat;
import jef.database.jsqlparser.expression.operators.arithmetic.Division;
import jef.database.jsqlparser.expression.operators.arithmetic.Mod;
import jef.database.jsqlparser.expression.operators.arithmetic.Multiplication;
import jef.database.jsqlparser.expression.operators.arithmetic.Subtraction;
import jef.database.jsqlparser.expression.operators.conditional.AndExpression;
import jef.database.jsqlparser.expression.operators.conditional.OrExpression;
import jef.database.jsqlparser.expression.operators.relational.Between;
import jef.database.jsqlparser.expression.operators.relational.EqualsTo;
import jef.database.jsqlparser.expression.operators.relational.ExpressionList;
import jef.database.jsqlparser.expression.operators.relational.GreaterThan;
import jef.database.jsqlparser.expression.operators.relational.GreaterThanEquals;
import jef.database.jsqlparser.expression.operators.relational.InExpression;
import jef.database.jsqlparser.expression.operators.relational.IsNullExpression;
import jef.database.jsqlparser.expression.operators.relational.LikeExpression;
import jef.database.jsqlparser.expression.operators.relational.ExistsExpression;
import jef.database.jsqlparser.expression.operators.relational.MinorThan;
import jef.database.jsqlparser.expression.operators.relational.MinorThanEquals;
import jef.database.jsqlparser.expression.operators.relational.NotEqualsTo;
import jef.database.jsqlparser.expression.Column;
import jef.database.jsqlparser.expression.Table;
import jef.database.jsqlparser.statement.select.StartWithExpression;
import jef.database.jsqlparser.statement.create.ColDataType;
import jef.database.jsqlparser.statement.create.ColumnDefinition;
import jef.database.jsqlparser.statement.create.CreateTable;
import jef.database.jsqlparser.statement.create.Index;
import jef.database.jsqlparser.statement.delete.Delete;
import jef.database.jsqlparser.statement.drop.Drop;
import jef.database.jsqlparser.statement.insert.Insert;
import jef.database.jsqlparser.statement.replace.Replace;
import jef.database.jsqlparser.statement.select.AllColumns;
import jef.database.jsqlparser.statement.select.AllTableColumns;
import jef.database.jsqlparser.statement.select.Distinct;
import jef.database.jsqlparser.statement.select.Join;
import jef.database.jsqlparser.statement.select.SubJoin;
import jef.database.jsqlparser.statement.select.Limit;
import jef.database.jsqlparser.statement.select.OrderByElement;
import jef.database.jsqlparser.statement.select.PlainSelect;
import jef.database.jsqlparser.statement.select.OrderBy;
import jef.database.jsqlparser.statement.select.Select;
import jef.database.jsqlparser.visitor.Expression;
import jef.database.jsqlparser.visitor.ItemsList;
import jef.database.jsqlparser.visitor.Statement;
import jef.database.jsqlparser.visitor.FromItem;
import jef.database.jsqlparser.visitor.SelectBody;
import jef.database.jsqlparser.visitor.SelectItem;
import jef.database.jsqlparser.statement.select.SelectExpressionItem;
import jef.database.jsqlparser.statement.select.SubSelect;
import jef.database.jsqlparser.statement.select.Top;
import jef.database.jsqlparser.statement.select.Union;
import jef.database.jsqlparser.statement.select.WithItem;
import jef.database.jsqlparser.statement.truncate.Truncate;
import jef.database.jsqlparser.statement.update.Update;
import jef.database.jsqlparser.expression.Interval;

/**
 * The parser generated by JavaCC
 */
public class JpqlParser  {
} 


PARSER_END(JpqlParser )


SKIP:
{
    " "
|   "\t"
|   "\r"
|   "\n"
}


TOKEN: /* SQL Keywords. prefixed with K_ to avoid name clashes */
{
<K_AS: "AS">
|   <K_BY:"BY">
|   <K_DO:"DO">
|   <K_IS:"IS">
|   <K_IN:"IN">
|   <K_OR:"OR">
|   <K_ON:"ON">
|   <K_ALL:"ALL">
|   <K_AND:"AND">
|   <K_ANY:"ANY">
|   <K_NOT:"NOT">
|   <K_SET:"SET">
|   <K_ASC:"ASC">
|   <K_TOP:"TOP">
|   <K_END:"END">
|   <K_DESC:"DESC">
|   <K_INTO:"INTO">
|   <K_NULL:"NULL">
|   <K_LIKE:"LIKE">
|   <K_DROP:"DROP">
|   <K_JOIN:"JOIN">
|   <K_LEFT:"LEFT">
|   <K_FROM:"FROM">
|   <K_OPEN:"OPEN">
|   <K_CASE:"CASE">
|   <K_WHEN:"WHEN">
|   <K_THEN:"THEN">
|   <K_ELSE:"ELSE">
|   <K_SOME:"SOME">
|   <K_FULL:"FULL">
|   <K_WITH:"WITH">
|   <K_TABLE:"TABLE">
|   <K_WHERE:"WHERE">
|   <K_USING:"USING">
|   <K_UNION:"UNION">
|   <K_GROUP:"GROUP">
|   <K_BEGIN:"BEGIN">
|   <K_INDEX:"INDEX">
|   <K_INNER:"INNER">
|   <K_LIMIT:"LIMIT">
|   <K_OUTER:"OUTER">
|   <K_ORDER:"ORDER">
|   <K_PARTITION:"PARTITION">
|   <K_RIGHT:"RIGHT">
|   <K_DELETE:"DELETE">
|   <K_CREATE:"CREATE">
|   <K_SELECT:"SELECT">
|   <K_OFFSET:"OFFSET">
|   <K_EXISTS:"EXISTS">
|   <K_HAVING:"HAVING">
|   <K_INSERT:"INSERT">
|   <K_UPDATE:"UPDATE">
|   <K_VALUES:"VALUES">
|   <K_ESCAPE:"ESCAPE">
|   <K_PRIMARY:"PRIMARY" (" ")+ "KEY">
|   <K_NATURAL:"NATURAL">
|   <K_REPLACE:"REPLACE">
|   <K_BETWEEN:"BETWEEN">
|   <K_TRUNCATE:"TRUNCATE">
|   <K_DISTINCT:"DISTINCT">
|   <K_INTERSECT:"INTERSECT">
|   <K_CONNECT:"CONNECT">
|   <K_PRIOR:"PRIOR">
|   <K_START:"START">
|   <K_INTERVAL:"INTERVAL">
|   <K_SQL:"SQL">
|   <K_NULLS:"NULLS">
|   <K_LAST:"LAST">
|   <K_OVER:"OVER">
}


TOKEN : /* Numeric Constants */
{
	< S_DOUBLE: ((<S_INTEGER>)? "." <S_INTEGER> ( ["e","E"] ([ "-","+"])? <S_INTEGER> )? 
				|
				(<S_INTEGER>)+ (".")? ["e","E"] ([ "-","+"])? (<S_INTEGER>)+
				)>
  | 	< S_INTEGER: ( <DIGIT> )+ >
  | 	< #DIGIT: ["0" - "9"] >

}


SPECIAL_TOKEN:
{
   <LINE_COMMENT: "--"(~["\r","\n"])*>
|  <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">

}


TOKEN:
{
	< S_IDENTIFIER: ( <LETTER> | <SPECIAL_CHARS>)+ ( <DIGIT> | <LETTER> |<SPECIAL_CHARS>)* >
| 	< #LETTER: ["a"-"z", "A"-"Z", "_"] >
|   < #SPECIAL_CHARS: "$" | "_">
|   < S_CHAR_LITERAL: "'" (~["'"])* "'" ("'" (~["'"])* "'")*>
|   < S_QUOTED_IDENTIFIER: "\"" (~["\n","\r","\""])* "\"" | ("`" (~["\n","\r","`"])* "`")|( "[" <S_IDENTIFIER> "]")  >
}


Statement Statement() :
{ Statement stm;}
{
	(
    stm = Select()
    |
    stm =  Update()
    |
    stm = Insert()
    |
    stm = Delete()
    |
    stm =  Replace()
    |
    stm = CreateTable()
    |
    stm = Drop()
    |
    stm = Truncate()
    )
    [";"]
    <EOF>
    { return stm; }
}


Update Update():
{ 
	Update update = new Update(); 
	FromItem table = null;
	Expression where = null;
	Column tableColumn = null;
	Expression value = null;
	Token tk=null;
}
{
    tk=<K_UPDATE> table=FromItem()
    <K_SET> tableColumn=Column() "=" value=SimpleExpression() { update.addSet(tableColumn, value); }
		  ("," tableColumn=Column() "=" value=SimpleExpression()  { update.addSet(tableColumn,value); } )*

   [ where=WhereClause() { update.setWhere(where); } ]
   {
     	update.setHint(tk.next);
   		update.setTable(table);
		return update;
   }
}

Replace Replace():
{ 
	Replace replace = new Replace(); 
	Table table = null;
	Column tableColumn = null;
	Expression value = null;
	
	List columns = new ArrayList(); 
	List expList = new ArrayList(); 
	ItemsList itemsList = null;
	Expression exp = null;
	
	
}
{
    <K_REPLACE> [<K_INTO>] table=Table()
    
    (
		(    
		    <K_SET> tableColumn=Column() "=" value=SimpleExpression() { columns.add(tableColumn); expList.add(value); }
			  ("," tableColumn=Column() "=" value=SimpleExpression() { columns.add(tableColumn); expList.add(value); } )*
			 {
		   		replace.setExpressions(expList);
			 }
		)
		|
	
		(
		     [LOOKAHEAD(2) "(" tableColumn=Column() { columns.add(tableColumn); } ("," tableColumn=Column() { columns.add(tableColumn); } )* ")"  ]
			
			( 
				<K_VALUES>  "(" exp=PrimaryExpression() { expList.add(exp); } 
						("," exp=PrimaryExpression()  { expList.add(exp); } )* ")" { itemsList = new ExpressionList(expList); }
				
				| 
					{ replace.setUseValues(false); }
				
				    itemsList=SubSelect()  
			)
		    { 
				replace.setItemsList(itemsList);
		    }
		)
	)
   { 
   		if (columns.size() > 0)
	   		replace.setColumns(columns);
   		replace.setTable(table);
		return replace;
   }
}


Insert Insert():
{
    Token tk = null;
	Insert insert = new Insert(); 
	FromItem table = null;
	Column tableColumn = null;
	List columns = new ArrayList(); 
	List primaryExpList = new ArrayList(); 
	ItemsList itemsList = null;
	Expression exp = null;
}
{
     tk=<K_INSERT> [<K_INTO>]
     table=TableOrParameter()
     [LOOKAHEAD(2) "(" tableColumn=Column() { columns.add(tableColumn); } ("," tableColumn=Column() { columns.add(tableColumn); } )* ")"  ]
	
	( 
		<K_VALUES>  "(" exp=SimpleExpression() { primaryExpList.add(exp); } 
				("," exp=SimpleExpression()  { primaryExpList.add(exp); } )* ")" { itemsList = new ExpressionList(primaryExpList); }
		
		| 
		
		[LOOKAHEAD(2) "(" ]
		(
			{ insert.setUseValues(false); }
			itemsList=  SubSelect() 
		)
		[ ")" ]
	)
    
    {
        insert.setHint(tk.next);
		insert.setItemsList(itemsList);
	    insert.setTable(table);
	    if (columns.size() > 0)
	    	insert.setColumns(columns);
    	return insert; 
    }
}



Delete Delete():
{ 
	Delete delete = new Delete();
	FromItem table = null;
	Expression where = null;
	String alias=null;
	Token tk=null;
}
{
    tk=<K_DELETE> [LOOKAHEAD(2) [alias=Alias()]<K_FROM>] table=TableWithAlias() 
    [where=WhereClause() { delete.setWhere(where); } ]
    {
      	delete.setAlias(alias);
        delete.setHint(tk.next);
    	delete.setTable(table);
    	return delete;
    }
}

Column Column():
{
	String name1 = null;
	String name2 = null;
	String name3 = null;
}
{
    name1=RelObjectName() [ "." name2=RelObjectName() ["." name3=RelObjectName()]]
    {
    	String colName = null;
    	if (name2 == null) {
    	    return new Column(null, name1);
    	} else if(name3 == null){
    	    return new Column(name1,name2);
    	} else {
    	    return new Column(name1,name2,name3);
   		}
   	}
}

Expression ColumnOrFunc():
{
	String name1 = null;
	String name2 = null;
	String name3 = null;
}
{
	name1=RelObjectName() [ "." name2=RelObjectName() ["." name3=RelObjectName()]]
    {
		if (name2 == null) {
    		return Column.getExpression(name1);
    	} else if(name3 == null){
    	    return new Column(name1,name2);
    	} else {
    	    return new Column(name1,name2,name3);
   		}
   	}
}

String RelObjectName()  :
{	Token tk = null; }
{
	(
	tk=<S_IDENTIFIER>
	|
	tk=<S_QUOTED_IDENTIFIER>
	)
	
    { return tk.image; }
}

FromItem TableWithAlias():
{
	FromItem table = null;
	String alias = null;
}
{
	table=TableOrParameter() [alias=Alias() { table.setAlias(alias); }]
	{ return table; }
}

FromItem TableOrParameter():{
  FromItem table=null;}
{	table=Table() {return table;}
	|
	table=sqlSegment() {return table;}
}

Table Table():
{ 
	Table table = null;
	String name1 = null;
	String name2 = null;
	String name3 = null;
}
{
	(LOOKAHEAD(3) 
		name1=RelObjectName() "." name2=RelObjectName() ["@" name3=RelObjectName()] { table = new Table(name1, name2); }
		|
		name1=RelObjectName()["@" name3=RelObjectName()]  { table = new Table(null, name1); } 
	)	
	{	
		table.addDbLink(name3);
		return table; 
	}
}




Select Select():
{ 
	Select select = new Select();
	SelectBody selectBody = null;
	List with = null; 
}
{
	[ with=WithList() { select.setWithItemsList(with); } ]
    selectBody = SelectBody()
	{ 
		select.setSelectBody(selectBody);
		return select; 
	}
}

SelectBody SelectBody():
{ SelectBody selectBody = null; }
{
	(
		LOOKAHEAD(Union())
		    selectBody = Union() 
    	|
	    selectBody = PlainSelect()
	)
	{ return selectBody; }
}

PlainSelect PlainSelect():
{ 
	PlainSelect plainSelect = new PlainSelect(); 
	List selectItems = null;
	FromItem fromItem = null;
	List joins = null;
	List distinctOn = null;
	Expression where = null;
	OrderBy orderBy;
	List groupByColumnReferences = null;
	StartWithExpression startWith = null;
	Expression having = null;
	Limit limit = null;
	Top top = null;
	Token tk=null;
}
{
    tk=<K_SELECT> 

    [ 
    	<K_ALL> 
    	| 
    		(
    			<K_DISTINCT> { Distinct distinct = new Distinct(); plainSelect.setDistinct(distinct); } 
    				[ "ON" "(" distinctOn=SelectItemsList()  { plainSelect.getDistinct().setOnSelectItems(distinctOn); } ")" ]
    		)
    ] 
    
    [ 	top = Top() { plainSelect.setTop(top);	} ]

    
    selectItems=SelectItemsList()
    
    
     // TODO
    [IntoClause()]
    [
    <K_FROM> fromItem=FromItem()
    	joins=JoinsList()
    	[ where=WhereClause() { plainSelect.setWhere(where); }]
    	[ groupByColumnReferences=GroupByColumnReferences() { plainSelect.setGroupByColumnReferences(groupByColumnReferences); }]
    	[ having=Having() { plainSelect.setHaving(having); }]
		[ startWith = StartWith() {plainSelect.setStartWith(startWith);} ]
		[ orderBy = OrderByElements()	{ 		 plainSelect.setOrderBy(orderBy);	}   ]
    	[ limit = Limit() { plainSelect.setLimit(limit);	} ]
    	{    		plainSelect.setFromItem(fromItem);
			if (joins.size() > 0)
			plainSelect.setJoins(joins);
		}
	]
	{
	    plainSelect.setHint(tk.next);
		plainSelect.setSelectItems(selectItems);
		return plainSelect; 
	}
}



Union Union():
{ 
	Union union = new Union(); 
	OrderBy orderByElements = null;
	Limit limit = null;
	PlainSelect select = null;
	ArrayList selects = new ArrayList();
/*
this is not 100% right, since multiple UNION could have different ALL/DISTINCT clauses...
*/
}
{
	(
	
		(
			"(" select=PlainSelect() {selects.add(select);} ")"
				<K_UNION> [ <K_ALL> { union.setAll(true); } | <K_DISTINCT> 	{ union.setDistinct(true); } ]
			"(" select=PlainSelect() {selects.add(select);} ")"
			(	<K_UNION> [ <K_ALL> | <K_DISTINCT> ] "(" select=PlainSelect() {selects.add(select);} ")" )*
			[orderByElements=OrderByElements() {union.setOrderBy(orderByElements);} ]
			[limit=Limit() {union.setLimit(limit);} ]
		)
		| 	
		(
			select=PlainSelect() {selects.add(select);} 
				<K_UNION> [ <K_ALL> { union.setAll(true); } | <K_DISTINCT> 	{ union.setDistinct(true); } ]
			select=PlainSelect() {selects.add(select);}
			(	<K_UNION> [ <K_ALL> | <K_DISTINCT> ] select=PlainSelect() {selects.add(select);} )*
			
		)
	)

	{ 
		union.setPlainSelects(selects);
		return union; 
	}
}

List WithList():
{
	ArrayList withItemsList = new ArrayList();
	WithItem with = null;
}
{
	<K_WITH> with=WithItem() { withItemsList.add(with); } ("," with=WithItem() { withItemsList.add(with); } )*
 
 	{ return withItemsList; }
}

WithItem WithItem():
{
	WithItem with = new WithItem();
	String name = null;
	List selectItems = null;
	SelectBody selectBody = null;
}
{
	 name=RelObjectName() { with.setName(name); }
	 [ "(" selectItems=SelectItemsList() ")" { with.setWithItemList(selectItems); } ]
	 <K_AS> 
	 "(" selectBody = SelectBody() { with.setSelectBody(selectBody); } ")"
	 { return with; }
}

List SelectItemsList():
{ 
	ArrayList selectItemsList = new ArrayList();
	SelectItem selectItem = null; 
}
{ 
    selectItem=SelectItem() { selectItemsList.add(selectItem); } ("," selectItem=SelectItem() { selectItemsList.add(selectItem); } )*
    
    { return selectItemsList; }
}

SelectItem SelectItem():
{
	//Function function = null;
	AllColumns allTableColumns = null;
	Column tableColumn = null;
	String alias = null;
	SelectItem selectItem = null;
	SelectExpressionItem selectExpressionItem = null;
	Expression expression = null;
	SubSelect subSelect = null;
}
{
	

    ("*" { selectItem = new AllColumns(); }
    |
	LOOKAHEAD(AllTableColumns()) selectItem=AllTableColumns()
	|
	 expression=SimpleExpression() { selectExpressionItem = new SelectExpressionItem(); selectExpressionItem.setExpression(expression); }
			 [alias=Alias() { selectExpressionItem.setAlias(alias); }] { selectItem = selectExpressionItem; }
	)
	{
		return selectItem;
	}
	
}

AllTableColumns AllTableColumns():
{
	Table table = null;
}
{  
     table=Table() "." "*"
	{ 
		return new AllTableColumns(table); 
	}
	
}

String Alias():
{ String retval = null; }
{
	[<K_AS>] retval=RelObjectName()
   { return retval; }
}

void IntoClause():
{}
{
   <K_INTO> Table() ("," Table())*
}

FromItem FromItem():
{
	FromItem fromItem = null;
	String alias = null;
}
{
	(
		(	
			"(" 	
				(
				LOOKAHEAD(SubJoin())
				fromItem=SubJoin()  
				|  
				fromItem=SubSelect()
				)
			")"
		)
		|
		fromItem=Table()
		|
		fromItem=sqlSegment() 
	)
	
	[alias=Alias() { fromItem.setAlias(alias);  } ]
	{
		return fromItem;
	}
}

FromItem SubJoin():
{
	FromItem fromItem = null;
	Join join = null;
	SubJoin subJoin = new SubJoin();
}
{
	fromItem=FromItem() { subJoin.setLeft(fromItem); } 
	join=JoinerExpression() { subJoin.setJoin(join); }
	
	{
		return subJoin;
	}
}

List JoinsList():
{
	ArrayList joinsList = new ArrayList();
	Join join = null; 
}
{

    (join=JoinerExpression() { joinsList.add(join); })*
    
    { return joinsList; }
}

Join JoinerExpression():
{ 
	Join join = new Join(); 
	FromItem right = null;
	Expression onExpression = null;
	Column tableColumn;
	List columns = null;
}
{

	  [ (
	  	<K_LEFT> { join.setLeft(true); }
  		| <K_RIGHT> { join.setRight(true); } 
  		| <K_FULL> { join.setFull(true); } 
  		| <K_NATURAL> { join.setNatural(true); } 
  		)
  	   ]
  		
  	   [
  	    (
  		<K_OUTER> { join.setOuter(true); }
  		| <K_INNER> { join.setInner(true); }
  		)
  	   ]
  	  
  	    ( <K_JOIN> | "," { join.setSimple(true); } ) right=FromItem()  
	[
		( <K_ON> onExpression=Expression()  { join.setOnExpression(onExpression); } )
		|
		( <K_USING> "(" tableColumn=Column() { columns = new ArrayList(); columns.add(tableColumn); } 
				("," tableColumn=Column() { columns.add(tableColumn); } )* ")"  
		  { join.setUsingColumns(columns); }   )
  	]			
  {
  	join.setRightItem(right); 
  } 
  
  
  { return join; }
}


Expression WhereClause():
{
	Expression retval = null;
}
{
    <K_WHERE> retval=Expression()
    { return retval; }
}


List GroupByColumnReferences():
{
	Expression columnReference = null;
	List columnReferences = new ArrayList();
}
{
    <K_GROUP> <K_BY> columnReference=SimpleExpression() {columnReferences.add(columnReference); }
    ("," columnReference=SimpleExpression()  {columnReferences.add(columnReference); } )*
	{
		return columnReferences;
	}
}

StartWithExpression StartWith():
{
	Expression startCond = null;
	Expression connectCond = null;
}
{
    <K_START> <K_WITH> startCond=Expression() { }
    [<K_CONNECT> <K_BY>
		connectCond=Expression() {}
    ]
	{
		return new StartWithExpression(startCond,connectCond);
	}
}

Expression Having():
{
	Expression having = null;
}
{
    <K_HAVING> having=Expression()
	{
		return having;
	}
}

OrderBy OrderByElements():
{ 
	OrderBy orderBy = null;
	OrderByElement orderByElement = null;
}
{
    <K_ORDER> <K_BY> orderByElement=OrderByElement() { orderBy=new OrderBy(); orderBy.add(orderByElement); }
        ("," orderByElement=OrderByElement() { orderBy.add(orderByElement); } )*
        [<K_NULLS> <K_LAST> {orderBy.setNullsLast(true);} ]
    {
    	return orderBy; 	
    }
}

OrderByElement OrderByElement():
{
	OrderByElement orderByElement = new OrderByElement(); 
	List retval = new ArrayList();
	Expression columnReference = null;
}
{
	columnReference = SimpleExpression()
    [<K_ASC> | (<K_DESC> { orderByElement.setAsc(false); } )  ]
	{
    	orderByElement.setExpression(columnReference);
		return orderByElement;
	}
}

Limit Limit():
{
	Limit limit = new Limit(); 
	Token token = null;
	Expression exp=null;
}
{
	(
LOOKAHEAD(4)
	<K_LIMIT>  (// mysql-> LIMIT offset,row_count
	 	token=<S_INTEGER> { limit.setOffset(Long.parseLong(token.image)); } 
	 	|
	 	exp=CaseJPQLParameter()	 { limit.setOffsetJdbcParameter(exp);} 
	 ) 
	 ","  
	(
		token=<S_INTEGER> { limit.setRowCount(Long.parseLong(token.image)); }
		|
		exp=CaseJPQLParameter() { limit.setRowCountJdbcParameter(exp);}
					)
	|<K_LIMIT>  ( 	// mysql-postgresql-> LIMIT (row_count | ALL) [OFFSET offset]
		token=<S_INTEGER> { limit.setRowCount(Long.parseLong(token.image)); } 
		|
		exp=CaseJPQLParameter() { limit.setRowCountJdbcParameter(exp);}  
		|
		<K_ALL> { limit.setLimitAll(true);} )
		 [<K_OFFSET> (token=<S_INTEGER> { limit.setOffset(Long.parseLong(token.image)); } | exp=CaseJPQLParameter() { limit.setOffsetJdbcParameter(exp);} )  ]
					
	|<K_OFFSET>  // postgresql-> OFFSET offset
				 (token=<S_INTEGER> { limit.setOffset(Long.parseLong(token.image)); } | exp=CaseJPQLParameter() { limit.setOffsetJdbcParameter(exp);} )  
			

		)
	{
		return limit;
	}
}

Top Top():
{
	Top top = new Top(); 
	Token token = null;
}
{
	<K_TOP>
	 (
	 	token=<S_INTEGER> { top.setRowCount(Long.parseLong(token.image)); } 
	 	|
	 	"?" { top.setRowCountJdbcParameter(true);} 
	 ) 
	{
		return top;
	}
}

	

Expression Expression():
{ 
	Expression retval = null;
}
{
	(
	LOOKAHEAD(OrExpression())
		retval=OrExpression() 
		|
		"(" retval=Expression() ")" {retval = new Parenthesis(retval); }
		|
		retval=CaseJPQLParameter()	
	)
	
    { return retval; }
}

Expression OrExpression()  :
{
	Expression left, right, result;
}
{
	left=AndExpression() { result = left; }
	(
		LOOKAHEAD(<K_OR>) 
			<K_OR>
			right=AndExpression()
			{
				result = new OrExpression(left, right);
				left = result;
	   		}
	 )*
	 {
	 	return result;
	 }
	   
}



Expression AndExpression() :
{
	Expression left, right, result;
	boolean not = false;
}
{

	(
	LOOKAHEAD(Condition())
	    left=Condition()
	    |
	    [ <K_NOT> { not = true; } ]
	    "(" left=OrExpression() ")" {left = new Parenthesis(left); if (not) { ((Parenthesis)left).setNot(); not = false; } }
	)
	{ result = left; }
	
	(
		LOOKAHEAD(<K_AND>)
 		<K_AND>
		(
		LOOKAHEAD(Condition())
		    right=Condition()
		    |
		    [ <K_NOT> { not = true; } ]
		    "(" right=OrExpression() ")" {right = new Parenthesis(right); if (not) { ((Parenthesis)right).setNot(); not = false; } }
		)
		{
			result = new AndExpression(left, right);
			left = result;
		}
	)*
	{
		return result;
	}
}

Expression Condition():
{
	Expression result;
}
{
	(LOOKAHEAD(SQLCondition()) result=SQLCondition()
	| LOOKAHEAD(RegularCondition()) result=RegularCondition()
	| result=sqlSegment()
	)
	
	{ return result; }
}

Expression RegularCondition():
{
	Expression result = null;
	Expression leftExpression;
	Expression rightExpression;
	boolean not = false;
	jef.database.jsqlparser.expression.BinaryExpression.Prior prior = null;
}
{
    [ <K_PRIOR> { prior=jef.database.jsqlparser.expression.BinaryExpression.Prior.LEFT;}]
    [ <K_NOT> { not = true; } ]
	leftExpression=ComparisonItem() { result = leftExpression; }

	(
	">" { result = new GreaterThan(); }
	| "<" { result = new MinorThan(); }
	| "=" { result = new EqualsTo(); }
	| ">=" { result = new GreaterThanEquals(); }
	| "<=" { result = new MinorThanEquals(); }
	| ("<>" | "!=") { result = new NotEqualsTo(); }
//	| "@@" { result = new Matches(); }
	)
	[ <K_PRIOR> {prior=jef.database.jsqlparser.expression.BinaryExpression.Prior.RIGHT;}]
	rightExpression=ComparisonItem()
	{
		BinaryExpression regCond = (BinaryExpression) result;
		regCond.setLeftExpression(leftExpression);
		regCond.setRightExpression(rightExpression);
		regCond.setPrior(prior);
		if (not)
			regCond.setNot();
	}		
	
	{ return result; }
}


Expression SQLCondition():
{
	Expression result;
}
{
	(
	LOOKAHEAD(InExpression()) result=InExpression()
	| LOOKAHEAD(Between()) result=Between()
	| LOOKAHEAD(IsNullExpression()) result=IsNullExpression()
	| LOOKAHEAD(ExistsExpression()) result=ExistsExpression()
	|  result=LikeExpression()
	)
	{ return result; }
}

Expression InExpression() :
{
	InExpression result = new InExpression();
	ItemsList itemsList = null;
	Expression leftExpression = null;
}
{
	leftExpression=SimpleExpression()
    [<K_NOT> { result.setNot(true); } ] <K_IN> "(" (LOOKAHEAD(SubSelect()) itemsList=SubSelect() | itemsList=SimpleExpressionList() ) ")"
	{ 
		result.setLeftExpression(leftExpression);
		result.setItemsList(itemsList);
		return result; 
	}
}

Expression Between() :
{
	Between result = new Between();
	Expression leftExpression = null;
	Expression betweenExpressionStart = null;
	Expression betweenExpressionEnd = null;
}
{
	leftExpression=SimpleExpression()
	    [<K_NOT> { result.setNot(true); }] 
	    <K_BETWEEN> betweenExpressionStart=SimpleExpression() <K_AND> betweenExpressionEnd=SimpleExpression()
	
	{ 
		result.setLeftExpression(leftExpression);
		result.setBetweenExpressionStart(betweenExpressionStart);
		result.setBetweenExpressionEnd(betweenExpressionEnd);
		return result; 
	}
}

Expression LikeExpression() :
{
	LikeExpression result = new LikeExpression();
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
	leftExpression=SimpleExpression()
    [<K_NOT> { result.setNot(true); } ] <K_LIKE> rightExpression=SimpleExpression()
    [<K_ESCAPE> token=<S_CHAR_LITERAL> { result.setEscape((new StringValue(token.image)).getValue()); }]
	{ 
		result.setLeftExpression(leftExpression);
		result.setRightExpression(rightExpression);
		return result; 
	}
}

Expression IsNullExpression():
{
	IsNullExpression result = new IsNullExpression();
	Expression leftExpression = null;
}
{
	leftExpression=SimpleExpression()
    <K_IS> [<K_NOT> { result.setNot(true); } ] <K_NULL>

	{ 
		result.setLeftExpression(leftExpression);
		return result; 
	}
}


Expression ExistsExpression():
{
	ExistsExpression result = new ExistsExpression();
	Expression rightExpression = null;
}
{
    [<K_NOT> { result.setNot(true); } ] <K_EXISTS> rightExpression=SimpleExpression()
	{ 
		result.setRightExpression(rightExpression);
		return result; 
	}
}


ExpressionList SQLExpressionList():
{
	ExpressionList retval = new ExpressionList();
	List expressions = new ArrayList();
	Expression expr = null;
	String between=null;
}
{
    expr=Expression() { expressions.add(expr); } (","
    |(<K_AS>    { between="as"; })
    |(<K_FROM>  { between="from";} )
    expr=Expression() { expressions.add(expr); })*
	{
	    retval.setBetween(between);
		retval.setExpressions(expressions);
		return retval;
	}
}

ExpressionList SimpleExpressionList():
{
	ExpressionList retval = new ExpressionList();
	List expressions = new ArrayList();
	Expression expr = null;
}
{
    expr=SimpleExpression() { expressions.add(expr); }
    (
       
    <K_AS> expr=SimpleExpression() { expressions.add(expr); retval.setBetween(" as "); }
   | <K_FROM> expr=SimpleExpression() { expressions.add(expr); retval.setBetween(" from ");}
   | ("," expr=SimpleExpression() { expressions.add(expr); })*
 )
	{
		retval.setExpressions(expressions);
		return retval;
	}
}

Expression ComparisonItem() :
{ 
	Expression retval = null; 
}
{
  (
    retval=AllComparisonExpression()
    | retval=AnyComparisonExpression()
    | retval=SimpleExpression()
  )

   {
      return retval;
   }
}

Expression AllComparisonExpression() :
{ 
	AllComparisonExpression retval = null; 
	SubSelect subselect = null; 
}
{
 <K_ALL> "(" subselect=SubSelect() ")" { retval = new AllComparisonExpression(subselect); }
   {
      return retval;
   }
}

Expression AnyComparisonExpression() :
{ 
	AnyComparisonExpression retval = null; 
	SubSelect subselect = null; 
}
{
 (<K_ANY> | <K_SOME>) "(" subselect=SubSelect() ")" { retval = new AnyComparisonExpression(subselect); }
   {
      return retval;
   }
}

Expression SimpleExpression():
{ 
	Expression retval = null; 
}
{
  (
		LOOKAHEAD(BitwiseAndOr())
		retval=BitwiseAndOr() 
		|
		"(" retval=BitwiseAndOr() ")" {retval = new Parenthesis(retval); }
  
  )

   {
      return retval;
   }
}

Expression ConcatExpression():
{
	Expression result = null;
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
    leftExpression=AdditiveExpression()  { result = leftExpression; }
    (
    	"||"
    	rightExpression=AdditiveExpression()
		{
			Concat binExp = new Concat();
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			result = binExp;
			leftExpression = result; 
		}								
    )*
    
    { return result; }
}

Expression BitwiseAndOr():
{
	Expression result = null;
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
    leftExpression=ConcatExpression()  { result = leftExpression; }
    (
    	LOOKAHEAD(2) (
    					"|" { result = new BitwiseOr(); }
    				  	| 
    				  	"&" { result = new BitwiseAnd(); } 
    				  ) 
    								
    						rightExpression=ConcatExpression()
    						
		{
			BinaryExpression binExp = (BinaryExpression) result;
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			leftExpression = result; 
		}								
    )*
    
    { return result; }
}

Expression AdditiveExpression():
{
	Expression result = null;
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
    leftExpression=MultiplicativeExpression()  { result = leftExpression; }
    (
    	LOOKAHEAD(2) ("+" { result = new Addition(); }
    								| "-" { result = new Subtraction(); } ) 
    								
    						rightExpression=MultiplicativeExpression()
    						
		{
			BinaryExpression binExp = (BinaryExpression) result;
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			leftExpression = result; 
		}								
    )*
    
    { return result; }
}


Expression MultiplicativeExpression():
{
	Expression result = null;
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
	(
	LOOKAHEAD(BitwiseXor())
	    leftExpression=BitwiseXor()
	    |
	    "(" leftExpression=AdditiveExpression() ")" {leftExpression = new Parenthesis(leftExpression); }
	)
      { result = leftExpression; }
    (
    	LOOKAHEAD(2) ("*" { result = new Multiplication(); }
    								| "/" { result = new Division(); }
    								| "%" { result=	new Mod();}) 
    								
				(
				LOOKAHEAD(BitwiseXor())
    						rightExpression=BitwiseXor()
						    |
						    "(" rightExpression=AdditiveExpression() ")" {rightExpression = new Parenthesis(rightExpression); }
				)
    						
		{
			BinaryExpression binExp = (BinaryExpression) result;
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			leftExpression = result; 
		}								
    )*
    { return result; }
}

Expression BitwiseXor():
{
	Expression result = null;
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
    leftExpression=PrimaryExpression()  { result = leftExpression; }
    (
    	"^"
    	rightExpression=PrimaryExpression()
		{
			BitwiseXor binExp = new BitwiseXor();
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			result = binExp;
			leftExpression = result; 
		}								
    )*
    
    { return result; }
}

Interval Interval():
{
  Expression value=null;
  Token unit=null;
}
{
   < K_INTERVAL>  (
     LOOKAHEAD(2) unit=<S_CHAR_LITERAL>
     {
		return new Interval(unit.image);
   	  }
   | 
     (value=PrimaryExpression()
     unit=<S_IDENTIFIER>)
     {
		return new Interval(value,unit.image);
   	  }
   )
   
}


Expression PrimaryExpression():
{ 
	Expression retval = null;
	Token token = null;
	boolean isInverse = false;
	String tmp = "";
}
{

(

	<K_NULL> { retval = NullValue.getInstance(); }
	| retval = Interval()
	| retval=CaseWhenExpression()
	
	| retval=CaseJPQLParameter()

	| LOOKAHEAD([ "+" | "-"] Function()) [ "+" | "-" { isInverse = true; }] retval=Function() 
	
	| LOOKAHEAD([	"+" | "-"] <S_DOUBLE>) 	[	"+" | "-" { tmp = "-"; }]  token=<S_DOUBLE> { retval = new DoubleValue(tmp+token.image); }
	
	| LOOKAHEAD([	"+" | "-"] <S_INTEGER>)  	[	"+" | "-" { tmp = "-"; }]  token=<S_INTEGER> { retval = new LongValue(tmp+token.image); }

	| LOOKAHEAD(2) 	[ "+" | "-" { isInverse = true; }] retval=ColumnOrFunc()

	| LOOKAHEAD(2) [ "+" | "-" { isInverse = true; }]  "(" retval=PrimaryExpression() ")" {retval = new Parenthesis(retval); }

	| token=<S_CHAR_LITERAL> { retval = new StringValue(token.image); }

	| [ "+" | "-" { isInverse = true; }] "(" retval=SubSelect() ")"
	
	| 	"{d" token=<S_CHAR_LITERAL> "}" { retval = new DateValue(token.image); }

	| 	"{t" token=<S_CHAR_LITERAL> "}" { retval = new TimeValue(token.image); }

	| 	"{ts" token=<S_CHAR_LITERAL> "}" { retval = new TimestampValue(token.image); }
	
	
)

    { 
		if (isInverse) { 
			retval = new InverseExpression(retval); 
		}
    	return retval; 
    }
}


JpqlParameter sqlSegment():
{	Token name=null;
	Token type=null;
	JpqlParameter caseExp=null;
}
{
  ":"
	(
	  name=<S_IDENTIFIER> "<" type=<K_SQL> ">"
	)             
    { 
    	caseExp = new JpqlParameter(name.image,false,type.image);
    	return caseExp;
    }
}

JpqlParameter CaseJPQLParameter():
{
	Token name=null;
	Token type=null;
	String typeStr=null;
	JpqlParameter caseExp=null;
}
{
	"?"
	(
	  name=<S_INTEGER>
      [LOOKAHEAD(2) "<" (type=<S_IDENTIFIER>|type=<K_SQL>) ">"      {
               typeStr=type.image;      }]
	)          
    { 
    	caseExp = new JpqlParameter(name.image,true,typeStr);
    	return caseExp;
    }
    |":"
	(
    /*
	为了容错，当Jpql参数名称为start over last with这些词时，因为优先匹配的关系，不认为是S_IDENTIFIER，造成解析出错。
	因此将这四个常见的可能特殊处理。
	*/
	  (name=<S_IDENTIFIER>|name=<K_START>|name=<K_OVER>|name=<K_LAST> |name=<K_WITH>)
      [LOOKAHEAD(2) "<" (type=<S_IDENTIFIER>|type=<K_SQL>) ">"
      {
        typeStr=type.image;
      }]
	)             
    { 
    	caseExp = new JpqlParameter(name.image,false,typeStr);
    	return caseExp;
    }
    
}

Expression CaseWhenExpression():
{
	CaseExpression caseExp = new CaseExpression();
	Expression switchExp = null;
	WhenClause clause;
	List whenClauses = new ArrayList();
	Expression elseExp = null;
}
{
	<K_CASE> 
	(
    	    ( clause=WhenThenSearchCondition() { whenClauses.add(clause); } )+
             [<K_ELSE> elseExp=PrimaryExpression()]
		|
		    switchExp=PrimaryExpression()
             ( clause=WhenThenValue() { whenClauses.add(clause); } )*
             [<K_ELSE> elseExp=PrimaryExpression()]
	)             
    <K_END>
    { 
    	caseExp.setSwitchExpression(switchExp);
        caseExp.setWhenClauses(whenClauses);
		caseExp.setElseExpression(elseExp);
    	return caseExp;
    }
}

WhenClause WhenThenSearchCondition():
{
	WhenClause whenThen = new WhenClause();
	Expression whenExp = null;
	Expression thenExp = null;
}
{
	<K_WHEN> whenExp=Expression() <K_THEN> thenExp=SimpleExpression()
	{
	   whenThen.setWhenExpression(whenExp);
	   whenThen.setThenExpression(thenExp);
	   return whenThen;
	}
}

WhenClause WhenThenValue():
{
	WhenClause whenThen = new WhenClause();
	Expression whenExp = null;
	Expression thenExp = null;
}
{
	<K_WHEN> whenExp=PrimaryExpression() <K_THEN> thenExp=SimpleExpression()
	{
	   whenThen.setWhenExpression(whenExp);
	   whenThen.setThenExpression(thenExp);
	   return whenThen;
	}
}

Function Function():
{
	Function function;
	Over over=null;
}
{
  (    
	"{fn" function=internalFunction()  "}"   {  function.setEscaped(true); }
  |
     function = internalFunction()
  |
     "@@" function = noArgFunction("@@")
   )
  [over=Over()  { function.setOver(over); } ]
   { 
    	return function; 
   }
}

Function internalFunction():
{
  Function retval = new Function();
	String funcName = null;
	String tmp = null;
	ExpressionList expressionList = null;
}
{
  
( funcName=RelObjectName()
   | 
  	// workaround for replace(string) function (name clash with mysql REPLACE expression MYSQL支持的replace into 语句，关键字撞车了)
   <K_REPLACE> { funcName = "REPLACE"; }
)
 [ "." tmp=RelObjectName() { funcName+= "." + tmp; } ["." tmp=RelObjectName() { funcName+= "." + tmp; }]]
    "(" [ [<K_DISTINCT> { retval.setDistinct(true); } | <K_ALL> { retval.setAllColumns(true); }] (expressionList=SimpleExpressionList() | "*" { retval.setAllColumns(true); }) ] ")"
    {
        retval.setParameters(expressionList);
	    retval.setName(funcName);
	    return retval;
	 }
}

Function noArgFunction(String prefix) :{  Function retval = new Function();  String funcName = null;}{  funcName = RelObjectName()  {    retval.setName(prefix + funcName);    return retval;  }}

Over Over():
{
 Column name;
 Over over;
 List list;
 OrderBy order=null;
}
{<K_OVER> "("
{
  over=new Over();
  list=new ArrayList();
}
 [
    <K_PARTITION> <K_BY> name=Column()
  { list.add(name); over.setPartition(list); }
 ("," name=Column(){list.add(name);})*
 ]
 [ order=OrderByElements()
  {over.setOrderBy(order); }]
  ")"
	{
      return over;
	}
}

SubSelect SubSelect():
{
	SelectBody selectBody = null;
}
{
    selectBody=SelectBody()
    {
    	SubSelect subSelect = new SubSelect();
    	subSelect.setSelectBody(selectBody);
    	return subSelect;
    }
}

CreateTable CreateTable():
{
	CreateTable createTable = new CreateTable();
	Table table = null;
	ArrayList columnDefinitions = new ArrayList();
	List columnSpecs = null;
	List tableOptions = new ArrayList();
	Token columnName;
	Token tk = null;
	Token tk3 = null;
	ColDataType colDataType = null;
	String stringList = null;
	ColumnDefinition coldef = null;
	List indexes = new ArrayList();
	List colNames = null;
	Index index = null;
	String parameter = null;
	SubSelect subselect=null;
}
{
	<K_CREATE> 
	// TODO:
//	[ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } ] 
	(CreateParameter())*

	<K_TABLE> table=Table() 
	(		"("
		
		columnName=<S_IDENTIFIER>
		colDataType = ColDataType()
		{
			columnSpecs = new ArrayList();
		}
	
		( parameter=CreateParameter() { columnSpecs.add(parameter); } )*
	
		{ 
			coldef = new ColumnDefinition();
			coldef.setColumnName(columnName.image);
			coldef.setColDataType(colDataType);
			if (columnSpecs.size() > 0)
				coldef.setColumnSpecStrings(columnSpecs);
			columnDefinitions.add(coldef);
		}
		((
			","
			
			(
				(
					tk=<K_INDEX>
						tk3=<S_IDENTIFIER>		
						colNames=ColumnsNamesList()
						{ 
							index = new Index(); 
							index.setType(tk.image);
							index.setName(tk3.image);
							index.setColumnsNames(colNames);
							indexes.add(index);
						}
				)
				|
				(
					tk=<K_PRIMARY> 
						colNames=ColumnsNamesList()
						{ 
							index = new Index(); 
							index.setParimaryKey();
							index.setColumnsNames(colNames);
							indexes.add(index);
						}
				)
//				|//				(//					tk=<K_KEY>//						tk3=<S_IDENTIFIER>		//						colNames=ColumnsNamesList()//						{ //							index = new Index(); //							index.setType(tk.image);//							index.setName(tk3.image);//							index.setColumnsNames(colNames);//							indexes.add(index);//						}//				)
				|
				(
					columnName=<S_IDENTIFIER> 
					colDataType = ColDataType()
					{
						columnSpecs = new ArrayList();
					}
				
					( 	parameter=CreateParameter() { columnSpecs.add(parameter); } 	)*
		
					{ 
						coldef = new ColumnDefinition();
						coldef.setColumnName(columnName.image);
						coldef.setColDataType(colDataType);
						if (columnSpecs.size() > 0)
							coldef.setColumnSpecStrings(columnSpecs);
						columnDefinitions.add(coldef);
					}
				)
			)
		)* 
		
		")"
		( 	parameter=CreateParameter() { tableOptions.add(parameter); } )*
{
		createTable.setTable(table);
		if (indexes.size() > 0)
			createTable.setIndexes(indexes);
		if (tableOptions.size() > 0)
			createTable.setTableOptionsStrings(tableOptions);
		if (columnDefinitions.size() > 0)
			createTable.setColumnDefinitions(columnDefinitions);
		return createTable;
	}	
	)
	
	| 
	< K_AS > subselect=SubSelect()
	{
	  createTable.setAs(subselect);
		return createTable;
	})
}

ColDataType ColDataType():
{
	ColDataType colDataType = new ColDataType();
	Token tk = null;
	ArrayList argumentsStringList = new ArrayList();
}
{
	( tk=<S_IDENTIFIER> { colDataType.setDataType(tk.image); } )
		
	
	[LOOKAHEAD(2) "(" ( (tk=<S_INTEGER> | tk=<S_CHAR_LITERAL>) { argumentsStringList.add(tk.image); } ["," {/*argumentsStringList.add(",");*/}] )*    ")"]
	{
		if (argumentsStringList.size() > 0)
			colDataType.setArgumentsStringList(argumentsStringList);
		return colDataType;
	}
}

String CreateParameter():
{
	String retval = null;
	Token tk = null;
}
{
		(
			tk=<S_IDENTIFIER> { retval = tk.image; } 
			|
			tk=<K_NULL> { retval = tk.image; } 
			|
			tk=<K_NOT> { retval = tk.image; } 
			|
			tk=<K_PRIMARY> { retval = tk.image; } 
			|
			tk=<S_CHAR_LITERAL> { retval = tk.image; } 
			|
			tk=<S_INTEGER> { retval = tk.image; } 
			|
			tk=<S_DOUBLE> { retval = tk.image; } 
			|
			"=" { retval = "="; } 
			| 
			retval=AList()
		)
	{return retval;}
}

String AList():
{
	StringBuffer retval = new StringBuffer("(");
	Token tk = null;
}
{
	 "(" 
	 
	 ( (tk=<S_INTEGER> | tk=<S_DOUBLE> | tk=<S_CHAR_LITERAL> | tk=<S_IDENTIFIER>) { retval.append(tk.image); } ["," {retval.append(",");}] )*    
	 
	")"
	{
		retval.append(")");
		return retval.toString();
	}
}

List ColumnsNamesList():
{
	List retval = new ArrayList();
	Token tk = null;
}
{
	 "(" 
	 
	 	tk=<S_IDENTIFIER> { retval.add(tk.image); } 
	 	( "," tk=<S_IDENTIFIER> { retval.add(tk.image); } )*
	 
	")"
	{
		return retval;
	}
}


Drop Drop():
{
	Drop drop = new Drop();
	Token tk = null;
	List dropArgs = new ArrayList();
}
{
	<K_DROP>
	(
		tk=<S_IDENTIFIER>
		| 
		tk=<K_TABLE>
		|
		tk=<K_INDEX>
	)
    { drop.setType(tk.image); }
	tk=<S_IDENTIFIER> { drop.setName(tk.image); }
	(tk=<S_IDENTIFIER> { dropArgs.add(tk.image); })*
	
	{
		if (dropArgs.size() > 0)
			drop.setParameters(dropArgs);
		return drop;
	}
}

Truncate Truncate():
{
	Truncate truncate = new Truncate();
	Table table;
}
{
	<K_TRUNCATE> <K_TABLE>
	table=Table() { truncate.setTable(table); }
	
	{
		return truncate;
	}
}
